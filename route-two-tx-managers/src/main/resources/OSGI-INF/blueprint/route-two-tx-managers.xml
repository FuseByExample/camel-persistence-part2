<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2015 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.4.0"
        xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- TM -->

    <!--
        aries-transaction-manager registers this interface if it finds the org.springframework.transaction.PlatformTransactionManager class
        We'll use global TX manager for JPA access, because JPA is managed by Aries too
        If we use spring-osgi instead of blueprint to create EntityManagerFactory, we could use
        org.springframework.orm.jpa.JpaTransactionManager
    -->
    <reference id="springJtaTxManager" interface="org.springframework.transaction.PlatformTransactionManager" />
    <!-- Spring JMS transaction manager (non JTA) -->
    <bean id="springJmsTxManager" class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="activeMqConnectionFactory" />
    </bean>

    <!-- ActiveMQ -->

    <bean id="activeMqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616" />
        <property name="userName" value="admin" />
        <property name="password" value="admin" />
        <property name="redeliveryPolicy">
            <bean class="org.apache.activemq.RedeliveryPolicy">
                <property name="maximumRedeliveries" value="0" />
            </bean>
        </property>
    </bean>

    <!-- Camel -->

    <!-- ActiveMQ JMS Configuration is defined as Transacted and use Spring JMS TxManager -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration">
            <bean class="org.apache.camel.component.jms.JmsConfiguration">
                <property name="connectionFactory" ref="activeMqConnectionFactory" />
                <!-- non-JTA transaction manager: -->
                <property name="transactionManager" ref="springJmsTxManager" />
                <!-- first parameter to javax.jms.Connection.createSession() -->
                <property name="transacted" value="true" />
                <property name="cacheLevelName" value="CACHE_NONE" />
            </bean>
        </property>
    </bean>

    <!-- This is actually transaction managed by Aries-Transaction which is managing JPA access -->
    <bean id="JPA_TRANSACTION" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="springJtaTxManager" />
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
    </bean>

    <!-- By using different transaction manager, we use separate transactions -->
    <bean id="JMS_TRANSACTION" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="springJmsTxManager" />
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
    </bean>

    <reference id="incidentDAO" interface="org.jboss.fuse.examples.persistence.part2.dao.IncidentDAO" filter="(kind=dao)" />

    <bean id="processIncident" class="org.jboss.fuse.examples.persistence.part2.ProcessIncidents">
        <property name="incidentDAO" ref="incidentDAO" />
    </bean>

    <!-- Initialise an Exception to throw it later on -->
    <bean id="myRandomException" class="java.lang.Exception">
        <argument index="0" value="Random JMS exception" />
    </bean>

    <camelContext id="camel" xmlns="http://camel.apache.org/schema/blueprint" trace="true">

        <dataFormats>
            <bindy id="csvReport" type="Csv" packages="org.jboss.fuse.examples.persistence.part2.model" />
        </dataFormats>

        <route id="file-to-queue">
            <from uri="file:datainsert?moveFailed=failed" />
            <unmarshal ref="csvReport" />
            <split>
                <simple>${body}</simple>
                <bean ref="processIncident" method="extract" />
                <choice>
                    <when>
                        <simple>${file:onlyname} contains 'faildb'</simple>
                        <to uri="activemq:queue:rollback" />
                    </when>
                    <otherwise>
                        <to uri="activemq:queue:incident" />
                    </otherwise>
                </choice>
                <log message=">>> Incident created in queue: ${body}" />
            </split>
        </route>

        <route id="queue-create-incident">
            <description>Route that successfully creates an incident in the database</description>
            <from uri="activemq:queue:incident" />
            <!--
                The Camel JMS component is designed to recognise Camel's rollback and exception semantics.
                This means that if the exchange is rolled back or if an Exception is thrown, the JMS endpoint will recognise the situation and roll back too.
                As we don't want the exchange to end up in the DLQ, we use a try/catch block to clear the exception and suppress this behaviour.
            -->
            <doTry>
                <to uri="direct:doIncident" />
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <!-- Do nothing -->
                </doCatch>
            </doTry>
        </route>

        <route id="do-create-incident">
            <description>Route that performs the actual work to successfully create an incident</description>
            <from uri="direct:doIncident" />
            <transacted ref="JPA_TRANSACTION" />
            <multicast parallelProcessing="false">
                <to uri="direct:registerCall" />
                <pipeline>
                    <log message=">>> Incident received: ${body}" />
                    <bean ref="processIncident" method="saveReport" />
                    <log message=">>> Record inserted: ${body}" />
                </pipeline>
            </multicast>
        </route>

        <route id="queue-rollback-incident">
            <description>Route that creates an incident in the database and then throws an exception</description>
            <from uri="activemq:queue:rollback" />
            <!--
                The Camel JMS component is designed to recognise Camel's rollback and exception semantics.
                This means that if the exchange is rolled back or if an Exception is thrown, the JMS endpoint will recognise the situation and roll back too.
                We want to suppress this behaviour because we don't want the exchange to end up in the DLQ, hence the try/catch block which clears the exception.
            -->
            <doTry>
                <to uri="direct:doRollback" />
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <!-- Do nothing -->
                </doCatch>
            </doTry>
        </route>

        <route id="do-rollback-incident">
            <description>Route that performs the actual work to create an incident and then raise an exception causing a rollback</description>
            <from uri="direct:doRollback" />
            <transacted ref="JPA_TRANSACTION" />
            <multicast parallelProcessing="false">
                <to uri="direct:registerCall" />
                <pipeline>
                    <log message=">>> Incident received: ${body}" />
                    <bean ref="processIncident" method="saveReport" />
                    <log message=">>>>>> Throwing exception from Rollback Incident branch!" />
                    <!--
                        will wind-up execution point up to Spring's transaction template. Then rollback will be called on active transaction
                        only one resource will be rolled back - JDBC connection
                    -->
                    <bean ref="processIncident" method="generateError" />
                    <log message=">>> Record inserted: ${body}" />
                </pipeline>
            </multicast>
        </route>

        <route id="register-call">
            <description>This route sends an auditing message to a queue</description>
            <from uri="direct:registerCall" />
            <onException>
                <exception>java.lang.Exception</exception>
                <rollback markRollbackOnlyLast="true" />
            </onException>
            <transacted ref="JMS_TRANSACTION" />
            <transform>
                <simple>Registering ${exchangeId}</simple>
            </transform>
            <to uri="activemq:queue:registerCall" />
            <!-- fail, if the filename contains the 'failjms' token -->
            <filter>
                <simple>${file:onlyname} contains 'failjms'</simple>
                <log message=">>>>>> Throwing exception from Register Call branch!" />
                <throwException ref="myRandomException" />
            </filter>
        </route>

    </camelContext>

</blueprint>
